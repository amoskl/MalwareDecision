__author__ = 'Larrath'

from sklearn import tree
from ngram import NgramBuilder

# The decision tree object is used to classify executable files into malicious and benign
# files. It checks for the presence of specific n-grams in the file and then, based on their
# presence, makes its decision.
# The decision tree is binary, as it checks the presence of n-grams.

#       ___Note about the decision tree algorithms___
# The Kolter & Maloof article appears to state that their research used the C4.5 algorithm (instead of ID3)
# in order to construct their decision tree. C4.5 was written by the same researcher who wrote ID3, and they
# both use the Gain Ratio metric in order to select which node to split on.
# The sklearn module DecisionTreeClassifier uses the CART algorithm, which is very similar to C4.5, apparently
# in particular when the decision tree is binary as in our case.
# Normally the CART algorithm uses a different metric than C4.5, however using Gain Ratio is also supported by
# the DecisionTreeClassifier as we have done.
# In a nutshell, even though we're not using exactly the same algorithm, our results should be virtually the same
# if we used the original C4.5 algorithm.

class DecisionTree:

    # The decision tree should have a node for each n-gram present in the collection passed to it.
    # According to the Kolter and Maloof paper, this size should be approximately 500.
    # The best decision trees will most likely be made using the best n-grams, so it is useful
    # to filter the n-gram collection appropriately before passing it to the constructor.

    def __init__(self, ngram_collection, sample_values):
        self.tree = tree.DecisionTreeClassifier('entropy')
        self.tree.fit(ngram_collection, sample_values)
        #TODO: still need to test the tree construction a bit.



    # classify the given file by decomposing it into ngrams and running it against the decision tree.
    def classify(self, filename):
        with open(filename, 'r') as f:
            ngram = '' # need a static method from NgramBuilder to extract the ngrams from the file.
        return self.tree.predict(ngram)


