__author__ = 'larrath'

from ngram.ngram import NgramFromFileBuilder
import configuration
import os
# Given the list of top K ngrams and the training set, we want to consider only those top K ngrams.
# Therefore, each sample in the training set is trimmed. Any ngrams it contains that are not part of
# the top K ngrams are discarded.
# The surviving ngrams are then returned.
def filter_ngrams(top_ngrams, sample_list):
    return list(set(top_ngrams).intersection(set(sample_list)))
    #print len(top_ngrams)
    #print len(sample_list)
    #result = []
    #for top in top_ngrams:
    #    print '\t', top, '\n'
    #    if top in sample_list:
    #        result.extend(top)
    #print result
    #return result


def make_training_set(top_ngrams):
    ngram_filter = set(top_ngrams)
    builder = NgramFromFileBuilder(configuration.NGRAM_SIZE)
    benign_files = os.listdir(configuration.BENIGN_FILES_FOLDER)
    malicious_files = os.listdir(configuration.MALWARE_FILES_FOLDER)

    prepared_benign_samples = []
    for f in benign_files:
        file_path = os.path.join(configuration.BENIGN_FILES_FOLDER, f)
        file_raw_ngrams = builder.get_ngrams_from_single_file(file_path)
        cleaned_ngrams = filter_ngrams(ngram_filter, file_raw_ngrams)
        prepared_benign_samples.append(cleaned_ngrams)

    prepared_malicious_samples = []
    for f in malicious_files:
        file_path = os.path.join(configuration.MALWARE_FILES_FOLDER, f)
        file_raw_ngrams = builder.get_ngrams_from_single_file(file_path)
        cleaned_ngrams = filter_ngrams(ngram_filter, file_raw_ngrams)
        prepared_malicious_samples.append(cleaned_ngrams)

    values_vector = []
    for i in range(len(prepared_benign_samples)):
        values_vector += [False]
    for i in range(len(prepared_malicious_samples)):
        values_vector += [True]

    result_list = []
    for sample in prepared_benign_samples:
        sample_data = dict((ngram, False) for ngram in top_ngrams)
        for gram in sample:
            sample_data[gram] = True
        result_list.append(sample_data)

    for sample in prepared_malicious_samples:
        sample_data = dict((ngram, False) for ngram in top_ngrams)
        for gram in sample:
            sample_data[gram] = True
        result_list.append(sample_data)

    return result_list, values_vector