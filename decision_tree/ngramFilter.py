import os

from ngram.ngram import NgramFromFileBuilder


def filter_ngrams(top_ngrams, sample_list):
    """
    # Given the list of top K ngrams and the training set, we want to consider only those top K ngrams.
    # Therefore, each sample in the training set is trimmed. Any ngrams it contains that are not part of
    # the top K ngrams are discarded.
    # The surviving ngrams are then returned.
    @param top_ngrams: List of most significant ngrams.
    @param sample_list: List of ngrams.
    @return: Intersection of top_ngrams and sample_list
    """
    return list(set(top_ngrams).intersection(set(sample_list)))


def make_training_set(top_ngrams, experiment_runner):
    ngram_filter = set(top_ngrams)
    builder = NgramFromFileBuilder(experiment_runner.ngram_size)
    benign_files = os.listdir(experiment_runner.benign_learning_set_dir)
    malicious_files = os.listdir(experiment_runner.malware_learning_set_dir)

    prepared_benign_samples = []
    for f in benign_files:
        file_path = os.path.join(experiment_runner.benign_learning_set_dir, f)
        file_raw_ngrams = builder.get_ngrams_from_single_file(file_path)
        cleaned_ngrams = filter_ngrams(ngram_filter, file_raw_ngrams)
        prepared_benign_samples.append(cleaned_ngrams)

    prepared_malicious_samples = []
    for f in malicious_files:
        file_path = os.path.join(experiment_runner.malware_learning_set_dir, f)
        file_raw_ngrams = builder.get_ngrams_from_single_file(file_path)
        cleaned_ngrams = filter_ngrams(ngram_filter, file_raw_ngrams)
        prepared_malicious_samples.append(cleaned_ngrams)

    values_vector = []
    for i in range(len(prepared_benign_samples)):
        values_vector += [False]
    for i in range(len(prepared_malicious_samples)):
        values_vector += [True]

    result_list = []
    for sample in prepared_benign_samples:
        sample_data = dict((ngram, False) for ngram in top_ngrams)
        for gram in sample:
            sample_data[gram] = True
        result_list.append(sample_data)

    for sample in prepared_malicious_samples:
        sample_data = dict((ngram, False) for ngram in top_ngrams)
        for gram in sample:
            sample_data[gram] = True
        result_list.append(sample_data)

    return result_list, values_vector