__author__ = 'larrath'

from ngram.ngram import NgramFromFileBuilder
import configuration
import os
# Given the list of top K ngrams and the training set, we want to consider only those top K ngrams.
# Therefore, each sample in the training set is trimmed. Any ngrams it contains that are not part of
# the top K ngrams are discarded.
# The surviving ngrams are then returned.
def filter_ngrams(top_ngrams, sample_list):
    return top_ngrams.intersection(set(sample_list))

def make_training_set(top_ngrams):
    ngram_filter = frozenset(top_ngrams)
    builder = NgramFromFileBuilder(configuration.NGRAM_SIZE)
    benign_files = os.listdir(configuration.BENIGN_FILES_FOLDER)
    malicious_files = os.listdir(configuration.MALWARE_FILES_FOLDER)

    benign_samples = [builder.get_ngrams_from_single_file(f) for f in benign_files]
    malicious_samples = [builder.get_ngrams_from_single_file(f) for f in malicious_files]

    prepared_benign_samples = [filter_ngrams(ngram_filter, sample) for sample in benign_samples]
    prepared_malicious_samples = [filter_ngrams(ngram_filter, sample) for sample in malicious_samples]

    values_vector = []
    for i in range(len(prepared_benign_samples)):
        values_vector[i] = False
    for i in range(len(prepared_benign_samples), len(prepared_malicious_samples)):
        values_vector[i] = True

    return (prepared_benign_samples + prepared_malicious_samples, values_vector)