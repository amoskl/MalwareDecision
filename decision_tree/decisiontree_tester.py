from configuration import NGRAM_SIZE, DECISION_TREE_OUTPUT
from decision_tree import decisiontree

__author__ = 'larrath'

# Datasets for testing the decision tree classifier. Since we don't want to delve too deeply into the implementation
# details of the various modules, testing is NOT automatic. Instead, these are 'reasonable' test cases that should be
# checked manually to see that things function the way they should.

# Both of the functions below create exactly the same decision tree. The only difference is that one uses numeric
# indicators and the other uses written labels.


def test_construction_numeric():
    values_vector = [True, True, False, True, False, False, False, False, True, True, False, True, True, False,
                     False, True, True, True, False, False]
    ngram_collection = []
    for i in range(0, 20):
        ngram_collection.append(dict({1: False, 2: False, 3: False, 4: False, 5: False, 6: False, 7: False, 8: False,
                                      9: False, 10: False, 11: False, 12: False}))

    list_of_lists = [[1, 4, 6, 8, 12], [1, 5, 7, 8, 10], [2, 3, 4, 7, 9, 10], [1, 2, 3, 7, 9, 11], [3, 4, 7, 10, 11],
                     [2, 5, 8, 9],
                     [1, 6, 7, 10, 11, 12], [3, 5, 6, 8, 9, 11, 12], [4, 5, 7, 10, 11, 12], [2, 3, 5, 6, 8],
                     [1, 6, 9, 12], [2, 4, 6, 10], [1, 6, 11, 12],
                     [1, 5, 10, 12], [2, 4, 5, 9, 10, 12], [1, 5, 6, 9, 10], [2, 4, 7, 12], [1, 6, 7, 8, 9, 10],
                     [2, 3, 4, 5, 6, 10, 12], [5, 6, 7, 8, 11, 12]]

    for X in range(len(list_of_lists)):
        for i in list_of_lists[X]:
            ngram_collection[X][i] = True

    t = decisiontree.DecisionTree(ngram_collection, values_vector, NGRAM_SIZE) #, True, DECISION_TREE_OUTPUT)
    print 'blah'
    print t


def test_construction_labels():
    values_vector = ['Malware', 'Malware', 'Benign', 'Malware', 'Benign', 'Benign', 'Benign', 'Benign', 'Malware',
                     'Malware', 'Benign', 'Malware', 'Malware', 'Benign', 'Benign', 'Malware', 'Malware', 'Malware',
                     'Benign', 'Benign']
    ngram_collection = []
    for i in range(0, 20):
        ngram_collection.append(
            dict({'AABB': False, 'TYXZ': False, 'RRRR': False, 'PYXX': False, 'KWKA': False, 'DABD': False,
                  'NNAA': False, 'TYYA': False, 'XABX': False, 'WWRB': False, 'BBSA': False, 'FAAD': False}))

    list_of_lists = [['AABB', 'PYXX', 'DABD', 'TYYA', 'FAAD'], ['AABB', 'KWKA', 'NNAA', 'TYYA', 'WWRB'],
                     ['TYXZ', 'RRRR', 'PYXX', 'NNAA', 'XABX', 'WWRB'], ['AABB', 'TYXZ', 'RRRR', 'NNAA', 'XABX', 'BBSA'],
                     ['RRRR', 'PYXX', 'NNAA', 'WWRB', 'BBSA'], ['TYXZ', 'KWKA', 'TYYA', 'XABX'],
                     ['AABB', 'DABD', 'NNAA', 'WWRB', 'BBSA', 'FAAD'],
                     ['RRRR', 'KWKA', 'DABD', 'TYYA', 'XABX', 'BBSA', 'FAAD'],
                     ['PYXX', 'KWKA', 'NNAA', 'WWRB', 'BBSA', 'FAAD'], ['TYXZ', 'RRRR', 'KWKA', 'DABD', 'TYYA'],
                     ['AABB', 'DABD', 'XABX', 'FAAD'], ['TYXZ', 'PYXX', 'DABD', 'WWRB'],
                     ['AABB', 'DABD', 'BBSA', 'FAAD'],
                     ['AABB', 'KWKA', 'WWRB', 'FAAD'], ['TYXZ', 'PYXX', 'KWKA', 'XABX', 'WWRB', 'FAAD'],
                     ['AABB', 'KWKA', 'DABD', 'XABX', 'WWRB'], ['TYXZ', 'PYXX', 'NNAA', 'FAAD'],
                     ['AABB', 'DABD', 'NNAA', 'TYYA', 'XABX', 'WWRB'],
                     ['TYXZ', 'RRRR', 'PYXX', 'KWKA', 'DABD', 'WWRB', 'FAAD'],
                     ['KWKA', 'DABD', 'NNAA', 'TYYA', 'BBSA', 'FAAD']]

    runner = 0
    for X in list_of_lists:
        for gram in X:
            ngram_collection[runner][gram] = True
        runner += 1

    t = decisiontree.DecisionTree(ngram_collection, True, DECISION_TREE_OUTPUT, True, ngram_collection, values_vector) #, True, DECISION_TREE_OUTPUT)
    t.drawTree('treeImageOut.dot')


test_construction_labels()