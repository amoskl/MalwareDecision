from experiment_runner import ExperimentLearner, ExperimentTester
from configuration import LEARNING_BIG, LEARNING_MEDIUM, LEARNING_SMALL, LEARNING_TINY, TEST_SET_BIG
from ngram_classificaiton.classification_methodology import IGSelector, RandomSelector


def main():
    """
    This is used to run the wanted experiment.
    Experiment available parameters:

        learning set: [LEARNING_BIG, LEARNING_MEDIUM, LEARNING_SMALL, LEARNING_TINY, LEARNING_FOR_TESTING]
        test set: [BIG_TEST_SET, TEST_SET_FOR_TESTING]
        ngram size: [1,2,3,4,5,6]
        algorithm used to choose what ngrams to use to build the tree with: [RandomSelector, IGSelector]
        number of ngrams to use to build the decision tree: [100, 250, 500, 750, 1000, 1250, 1500, 1750, 2000[

    Examples:
        1. run_full_experiment(LEARNING_MEDIUM, TEST_SET_BIG, 6, 500, IGSelector)
        2. run_full_experiment(LEARNING_BIG, TEST_SET_BIG, 4, 1500, IGSelector)
        3. run_full_experiment(LEARNING_MEDIUM, TEST_SET_BIG, 4, 500, RandomSelector)

    """

    run_full_experiment(LEARNING_BIG, TEST_SET_BIG, 4, 1750, IGSelector)

    run_full_experiment(LEARNING_TINY, TEST_SET_BIG, 4, 1000, IGSelector)

    # EXTRA:
    run_full_experiment(LEARNING_BIG, TEST_SET_BIG, 4, 1000, RandomSelector)


def run_full_experiment(learning_set_class, test_set_class, ngram_size, top_ngram_size, classifier_class):
    print "Running full experiment"
    tree = learn(learning_set_class, ngram_size, top_ngram_size, classifier_class)
    test(test_set_class, tree)


def learn(learning_set_class, ngram_size, top_ngram_size, classifier_class):
    print "Learning"
    exp_learner = ExperimentLearner(learning_set_class, ngram_size, top_ngram_size, classifier_class)
    return exp_learner.build_tree()


def test(test_set_class, tree):
    print "Testing"
    exp_tester = ExperimentTester(test_set_class, tree)
    exp_tester.calc_stat()

if __name__ == "__main__":
    main()