import os
import pickle

from configuration import OUT_FOLDER
from tree_builder import TreeBuilder
from Experiments.experiment_framework import Experiment


class ExperimentLearner(object):

    def __init__(self, learning_set_class, ngram_size, top_ngram_size):
        self.ngram_size = ngram_size
        self.top_ngram_size = top_ngram_size

        self.benign_learning_set_dir = learning_set_class.BENIGN
        self.malware_learning_set_dir = learning_set_class.MALWARE

        self.name = learning_set_class.NAME + "_" + str(self.ngram_size) + "_" + str(self.top_ngram_size)

        self.out_folder = os.path.join(OUT_FOLDER, self.name)
        if not os.path.exists(self.out_folder):
            os.makedirs(self.out_folder)
        else:
            print "ERROR - you gave me a folder to create that already exists!"
            exit()

        self._tree_file_path = None

    def build_tree(self):
        tree_builder = TreeBuilder(self)
        self._tree_file_path = tree_builder.build()

    def get_tree_path(self):
        return self._tree_file_path


class ExperimentTester(object):

    STATISTICS_FILE_NAME = "stat.txt"

    def __init__(self, test_set_class, tree):
        self._tree = tree
        self.benign_test_set = test_set_class.BENIGN
        self.malware_test_set = test_set_class.MALWARE

    def _load_tree_from_file(self, file_path):
        tree = pickle.load(open(file_path, "rb"))
        return tree

    def calc_stat(self, description="Default description"):
        experiment = Experiment(description)
        tree = self._load_tree_from_file(self._tree)

        benign = []
        malware = []

        for f in os.listdir(self.benign_test_set):
            benign.append(os.path.join(self.benign_test_set, f))

        for f in os.listdir(self.malware_test_set):
            malware.append(os.path.join(self.malware_test_set, f))

        experiment.add_individual_experiment(tree, benign, malware, description)

        tree_dir = os.path.dirname(self._tree)

        with open(os.path.join(tree_dir, self.STATISTICS_FILE_NAME), "w") as stat_file:
            print >> stat_file, experiment.show_description()
