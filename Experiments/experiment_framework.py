__author__ = 'larrath'


class Experiment:
    def __init__(self, description=None):
        self.entries = []
        self.description = description

    def show_description(self):
        title = 'Experiment name: ' + self.description
        details = ''
        for i in range(len(self.entries)):
            details += str(i) + '.\t\t' + self.entries[i].get_description + '\n'
        return title + '\n' + details

    def add_individual_experiment(self, decision_tree, test_set_benign, test_set_malicious, tree_description, position=None):
        entry = ExperimentEntry()

        for sample in test_set_benign:
            print decision_tree.classify(sample)
            if decision_tree.classify(sample) == 'Malware':
                entry.increment_false_positives()
            else:
                entry.increment_true_negatives()

        for sample in test_set_malicious:
            print decision_tree.classify(sample)
            if decision_tree.classify(sample) == 'Malware':
                entry.increment_true_positives()
            else:
                entry.increment_false_negatives()

        if position:
            self.entries.insert(position, entry)
        else:
            self.entries.append(entry)


class ExperimentEntry:
    def __init__(self):
        self.true_positives = 0
        self.true_negatives = 0
        self.false_positives = 0
        self.false_negatives = 0
        self.total_samples = 0

    def increment_true_positives(self):
        self.total_samples += 1
        self.true_positives += 1

    def increment_true_negatives(self):
        self.total_samples += 1
        self.true_negatives += 1

    def increment_false_positives(self):
        self.total_samples += 1
        self.false_positives += 1

    def increment_false_negatives(self):
        self.total_samples += 1
        self.false_negatives += 1

    def get_true_positives(self):
        return self.true_positives

    def get_true_negatives(self):
        return self.true_negatives

    def get_false_positives(self):
        return self.false_positives

    def get_false_negatives(self):
        return self.true_negatives

    def get_true_positive_ratio(self):
        return float(self.true_positives) / self.total_samples

    def get_true_negative_ratio(self):
        return float(self.true_negatives) / self.total_samples

    def get_false_positive_ratio(self):
        return float(self.false_positives) / self.total_samples

    def get_false_negative_ratio(self):
        return float(self.false_negatives) / self.total_samples

    def get_counters(self):
        return self.true_positives, self.true_negatives, self.false_positives,\
               self.false_negatives, self.total_samples

    def get_ratios(self):
        return self.get_true_positive_ratio(), self.get_true_negative_ratio(),\
               self.get_false_positive_ratio(), self.get_false_negative_ratio(), self.total_samples

    def get_description(self):
        ans = 'true_pos: ' + '{percent:.2%}'.format(percent=self.get_true_positive_ratio()) + ' (' +\
              str(self.get_true_positives()) + ' samples)' + '\t'
        ans += 'true_neg: ' + '{percent:.2%}'.format(percent=self.get_true_negative_ratio()) + ' (' +\
              str(self.get_true_negatives()) + ' samples)' + '\t'
        ans += 'false_pos: ' + '{percent:.2%}'.format(percent=self.get_false_positive_ratio()) + ' (' +\
              str(self.get_false_positives()) + ' samples)' + '\t'
        ans += 'false_neg: ' + '{percent:.2%}'.format(percent=self.get_false_negative_ratio()) + ' (' +\
              str(self.get_false_negatives()) + ' samples)' + '\t'
        ans += 'total: ' + str(self.total_samples)

        return ans