__author__ = 'larrath'

import os

class Experiment:
    def __init__(self, description=None):
        self.entries = []
        self.description = description

    def show_description(self):
        title = 'Experiment name: ' + self.description
        details = ''
        for i in range(len(self.entries)):
            details += str(i) + '.\t\t' + self.entries[i].get_description() + '\n'
        return title + '\n' + details

    def add_individual_experiment(self, decision_tree, test_set_benign, test_set_malicious, tree_description, position=None):
        entry = ExperimentEntry()
        CLASSIFIED_MALWARE = [True]


        for sample in test_set_benign:
            classification = decision_tree.classify(sample)
            print 'Classified ' + str(sample) + ':\t' + str(classification)
            print 'Classified as Malware: ' + str(classification == CLASSIFIED_MALWARE)

            if classification == CLASSIFIED_MALWARE:
                entry.increment_false_positives()
            else:
                entry.increment_true_negatives()

        for sample in test_set_malicious:
            classification = decision_tree.classify(sample)
            print 'Classified ' + str(sample) + ':\t' + str(classification)
            print 'Classified as Malware: ' + str(classification == CLASSIFIED_MALWARE)

            if classification == CLASSIFIED_MALWARE:
                entry.increment_true_positives()
            else:
                entry.increment_false_negatives()


        if position:
            self.entries.insert(position, entry)
        else:
            self.entries.append(entry)


class ExperimentEntry:
    def __init__(self):
        self.true_positives = 0
        self.true_negatives = 0
        self.false_positives = 0
        self.false_negatives = 0
        self.total_samples = 0
        self.total_positive_responses = 0
        self.total_negative_responses = 0
        self.correct_answers = 0
        self.wrong_answers = 0
        self.optimal_positive = 0
        self.optimal_negative = 0

    def increment_true_positives(self):
        self.total_samples += 1
        self.true_positives += 1
        self.total_positive_responses += 1
        self.correct_answers += 1
        self.optimal_positive += 1

    def increment_true_negatives(self):
        self.total_samples += 1
        self.true_negatives += 1
        self.total_negative_responses += 1
        self.correct_answers += 1
        self.optimal_negative += 1

    def increment_false_positives(self):
        self.total_samples += 1
        self.false_positives += 1
        self.total_positive_responses += 1
        self.wrong_answers += 1
        self.optimal_negative += 1

    def increment_false_negatives(self):
        self.total_samples += 1
        self.false_negatives += 1
        self.total_negative_responses += 1
        self.wrong_answers += 1
        self.optimal_positive += 1

    def get_true_positives(self):
        return self.true_positives

    def get_true_negatives(self):
        return self.true_negatives

    def get_false_positives(self):
        return self.false_positives

    def get_false_negatives(self):
        return self.true_negatives

    def get_true_positive_ratio(self):
        return float(self.true_positives) / self.optimal_positive

    def get_true_negative_ratio(self):
        return float(self.true_negatives) / self.optimal_negative

    def get_false_positive_ratio(self):
        return float(self.false_positives) / self.wrong_answers

    def get_false_negative_ratio(self):
        return float(self.false_negatives) / self.wrong_answers

    def get_counters(self):
        return self.true_positives, self.true_negatives, self.false_positives,\
               self.false_negatives, self.total_samples

    def get_success_rate(self):
        return float(self.correct_answers) / (self.correct_answers + self.wrong_answers)

    def get_ratios(self):
        return self.get_true_positive_ratio(), self.get_true_negative_ratio(),\
               self.get_false_positive_ratio(), self.get_false_negative_ratio(), self.total_samples

    def get_description(self):
        ans = 'true_pos correct: ' + '{percent:.2%}'.format(percent=self.get_true_positive_ratio()) + ' (' +\
              str(self.get_true_positives()) + ' samples)' + '\t'
        ans += 'true_neg correct: ' + '{percent:.2%}'.format(percent=self.get_true_negative_ratio()) + ' (' +\
              str(self.get_true_negatives()) + ' samples)' + '\t'
        ans += 'false_pos errors out of total: ' + '{percent:.2%}'.format(percent=self.get_false_positive_ratio()) + ' (' +\
              str(self.get_false_positives()) + ' samples)' + '\t'
        ans += 'false_neg errors out of total: ' + '{percent:.2%}'.format(percent=self.get_false_negative_ratio()) + ' (' +\
              str(self.get_false_negatives()) + ' samples)' + '\t'
        ans += '\n\ttotal sample count: ' + str(self.total_samples) + '\tsuccess rate: ' + \
               '{percent:.2%}'.format(percent=self.get_success_rate())

        return ans