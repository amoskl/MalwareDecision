import subprocess
import os
import time


class NgramFromFoldersBuilder(object):
    """
    Class for building ngrams out of files in two folders
    """
    _NGRAMS_BUILDER = "ngrams"  # Name of c executable used to build ngrams
    _CURRENT_DIR = os.path.dirname(__file__)

    def __init__(self, n, malware_folder_path, benign_folder_path, output_path):
        """
        @param n: Size of an N-gram.
        @param malware_folder_path: Path to a folder that contains malware executable files.
        @param benign_folder_path: Path to a folder that contains benign executable files.
        @param output_path: Path to save the output file of the "ngrams" c exe.
        """
        self._n = n
        self._malware_folder_path = malware_folder_path
        self._benign_folder_path = benign_folder_path
        self._output_path = output_path

    def build(self):
        """
        Runs "ngram" exe that builds a file called out.txt in the output_path.
        """
        print os.path.join(self._CURRENT_DIR, self._NGRAMS_BUILDER)

        args = [os.path.join(self._CURRENT_DIR,
                             self._NGRAMS_BUILDER),
                str(self._n),
                self._benign_folder_path,
                self._malware_folder_path,
                self._output_path]
        subprocess.call(args)


class NgramFromFileBuilder(object):
    """
    Used to build ngrams out of a single file
    """

    def __init__(self, n):
        """
        @param n: Size of an N-gram.
        """
        self._n = n

    def _get_ngram_from_buffer(self, ngram_buffer):
            for i in xrange(len(ngram_buffer) - self._n + 1):
                ngram = ngram_buffer[i: i + self._n]
                yield ngram

    def get_ngrams_from_single_file(self, file_path):
        """
        @param file_path: Path of a file to build the ngrams from
        @return: set of ngrams. (unique ngrams list)
        """
        print "Reading ngrams from file:{file}".format(file=os.path.basename(file_path))
        ngrams = set()

        with open(file_path, 'rb') as current_file:
            ngram_buffer = current_file.read()

            cur_time = time.time()

            for ngram in self._get_ngram_from_buffer(ngram_buffer):
                ngrams.add(ngram)

            print "Read {ngrams} new ngrams from {file} in {seconds} seconds.".format(ngrams=len(ngrams),
                                                                                      file=os.path.basename(file_path),
                                                                                      seconds=(time.time()-cur_time))
            return ngrams