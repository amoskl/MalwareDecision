__author__ = 'amoskleinberger'

import redis
db = None
def create_db():
    global db
    db = redis.StrictRedis(host="localhost", port=6379, db=0)

def add_ngram(ngram):
    db.set(ngram, 1)

def save():
    print "saving"
    db.bgsave()
    print "end saving"
    print db.dbsize()






#from sqlalchemy import *
#from sqlalchemy.orm import sessionmaker
#from sqlalchemy.ext.declarative import declarative_base
#Base = declarative_base()
#engine = create_engine('sqlite:///malware_classification.db')
#Base.metadata.create_all(engine)
#Base.metadata.bind = engine
#db_session = sessionmaker(bind=engine)
#
#session = None
#
#def create_db():
#    engine = create_engine('sqlite:///malware_classification.db')
#    Base.metadata.create_all(engine)
#    Base.metadata.bind = engine
#    db_session = sessionmaker(bind=engine)
#    global session
#    session = db_session()
#
#class Ngram(Base):
#
#    __tablename__ = 'ngrams'
#    bytes = Column(Binary, primary_key=True)
#    malware_count = Column(Integer)
#    benign_count = Column(Integer)
#
#    def __repr__(self):
#        return "<Ngram(bytes={bytes}, malware_count={malware_count}, benign_count={benign_count}>".\
#            format(bytes=self.bytes, malware_count=self.malware_count, benign_count=self.benign_count)
#
#
#def add(ngrams):
#
#
#    # Bind the engine to the metadata of the Base class so that the
#    # declaratives can be accessed through a DBSession instance
#
#    # A DBSession() instance establishes all conversations with the database
#    # and represents a "staging zone" for all the objects loaded into the
#    # database session object. Any change made against the objects in the
#    # session won't be persisted into the database until you call
#    # session.commit(). If you're not happy about the changes, you can
#    # revert all of them back to the last commit by calling
#    # session.rollback()
#
#    print "merging"
#
#    for ngram in ngrams:
#
#    # Insert a Person in the person table
#        new_ngram = Ngram(bytes=ngram, malware_count=1, benign_count=1)
#        session.merge(new_ngram)
#
#    session.commit()
#
#    print "after merge"


