Amos Kleinberger 201637402
Bentzi Rabby 200675262
Yeshi Oltchik 300638111

OPERATING SYSTEM:
----------------
This project is meant to run on Linux/Unix/OSX operating system. windows is currently not supported

Python version:
---------------
This project was tested on python 2.7 version.


Prerequisites - python modules:
-------------------------------
List of needed packages(see notes at the bottom):

1. numpy          -> pip install numpy
2. scipy          -> pip install scipy
3. scikit-learn   -> read installation instructions below

--------------------------------------------------------------------------------------------------------------
The Decision Tree (decisiontree.py) is built using the 'scikit-learn' package, also referred to as 'sklearn'.
In order to install scikit-learn, the 'numpy' and 'scipy' modules are also needed.
The URL for the scikit-learn package website is http://scikit-learn.org/stable/
Installation instructions can be found here: http://scikit-learn.org/stable/install.html
And this is the documentation for the package: http://scikit-learn.org/stable/documentation.html
We personally did not manage to install it on Windows 64-bit.

Prerequisites - Graphviz:
-------------------------
In order to view the created decision tree, download Graphviz from here:
http://www.graphviz.org/

Prerequisites - c++ ngram builder:
----------------------------------
1. go to MalwareDecision/ngram
2. run "make ngrams"
3. linux executable file called "ngrams" should be built in the ngrams folder

Folders Configuration:
-----------------------
lets define 3 directories:
1. INPUT_DIRECTORY - the directory in which the training set resides.
   it should have the following structure:
   INPUT DIRECTORY:
        LearningSet-big    (this holds the big collection of benign files)
        LearningSet-medium
        LearningSet-small
        LearningSet-tiny
        malware-big        (this holds the big collection of malware files)
        malware-medium
        malware-small
        malware-tiny

   TEST_SET_FOLDER - the directory in which the test set resides.
   it should have the following structure:
   TEST_SET_FOLDER:
       benign         (this holds the collection of benign test files)
       malware        (this holds the collection of malware test files)

    OUT_FOLDER - the directory in which the output files will be created

Adding configurations:
-------------------------
1. Open configuration.py
2. set the INPUT_DIRECTORY
3. set the OUT_FOLDER
4. set the TEST_SET_FOLDER

Running:
---------
1. open MalwareDecision/Experimemts/experiment.py
2. add the wanted running line to the main() function (see examples in the main function)
3. run experiment.py


Understanding result files:
---------------------------
After each experiment, a folder with a descriptive name will be created in the configured OUT_FOLDER.
In the new folder, there will be 4 files:
1. A file with a .dot suffix, this is the decision tree image that can be viewed with Graphviz.
2. A file called out.txt, the is the file that contains all the ngrams found in the training set.
   After Each ngram written in the out.txt , the number of times this ngram appeared in benign files
   and the number of times this file appeared in malware file is also written.
3. A file with tree_ prefix, this file is the decision tree serialized to a file for later use
4. A file called stat.txt, this file will contain the experiment results which are:
   a. True-pos correct - Percentage of true positive( out of the files classified as malware, what percentage were malware)
   b. True-neg correct - Percentage of true negative( out of the files classified as benign, what percentage were benign)
   c. False positive errors - out of the files that were misclassified, the percentage that where classified as
      malware but where actually benign
   d. False negative errors - out of the files that were misclassified, the percentage the where classified as
      benign but where actually malware
   e. Success rate - percentage of files that where classified correctly.


ENJOY :)